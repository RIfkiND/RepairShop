// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Admin {
  id String @id @default(uuid())
  name String @unique
  email String @unique
  password String 
  image  String?
}
model Account {
  id                 String    @id @default(uuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  device        Devices[]
  repair_request Repair_Request[]
  review Review[]
  transactions Transactions[]
}

model VerificationRequest {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}


model type {
  id String @id @default(uuid())
  name String
  device  Devices[]
}
model Brand {
  id String @id @default(uuid())
  name String 
  image String
  device Devices[]
  parts Parts[]

@@map("brands")
}

model Model {
  id String @id @default(uuid())
  name String
  image String
   device Devices[]
  parts Parts[]
  @@map("models")
}
model Devices {
id String @id @default(uuid())
user User @relation(fields: [userId] ,references: [id])
userId  String
type type @relation(fields: [typeId], references: [id])
typeId String
device_name String
brand  Brand @relation(fields: [brandId],references: [id])
brandId String
model Model @relation(fields: [modelId],references: [id])
modelId String
serial_number String @unique
repair_request Repair_Request[]

}

model Repair_Request{
  id String @id @default(uuid())
  name String
  user User @relation(fields: [userId],references: [id])
  userId String
  device Devices @relation(fields: [deviceId],references: [id])
  deviceId String
  problem String
  file String
  status STATUS @default(PENDING)
  request_date DateTime @default(now())
  complete_date DateTime
  repair Repairs[]
}

model Repairs{
  id String @id @default(uuid())
  request Repair_Request @relation(fields: [requestId] ,references: [id])
  requestId String 
  repair_details String
  cost Decimal
  repair_date DateTime @default(now())
  repair_parts Repair_Parts[]

}

model Repair_Parts{
  id String @id @default(uuid())
  repair Repairs @relation(fields: [repairId],references: [id])
  repairId  String
  quantity  Int @db.SmallInt
  total_cost Decimal
}



model Parts{
  id String @id @default(uuid())
  name String
  brand Brand @relation(fields: [brandId],references: [id])
  brandId String
  model Model @relation(fields: [modelId],references: [id])
  modelId String
  image String 
  cost Decimal
  stock Int @db.SmallInt
}



model Review{
  id String @id @default(uuid())
  user User @relation(fields: [userId],references: [id])
  userId  String
  rating Int @db.SmallInt
  comment String @db.Text
  file String? 
  createdAt DateTime @default(now())
  updatedAt DateTime 
}

model Transactions {
  id String @id @default(uuid())
  user User  @relation(fields: [userId],references: [id])
  userId String 
  number String 
  snap_token String?
  status  STATUS @default(PENDING)
  createdAt DateTime @default(now())
}
enum STATUS{
  PENDING 
  PROSESS
  COMPLETED
}