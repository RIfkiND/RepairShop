// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(uuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(uuid())
  name          String
  email         String  @unique
  emailVerified DateTime? @map("email_verified")
  password String
 
  accounts      Account[]
  sessions      Session[]
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Customer{
  id String @id @default(uuid())
  name String
  email String @unique
  lokasi String
  devices       Devices[]
  repair_request Repair_Request[]
  review    Review[]
  transactions Transactions[]
}

model Devices {
id String @id @default(uuid())
customer Customer @relation(fields: [customerId],references: [id])
customerId String
type String
device_name String
brand String
model String
serial_number String @unique
repair_request Repair_Request[]

}

model Repair_Request{
  id String @id @default(uuid())
  name String
  customer Customer @relation(fields: [customerId],references: [id])
  customerId String
  device Devices @relation(fields: [deviceId],references: [id])
  deviceId String
  problem String
  file String
  status STATUS @default(PENDING)
  request_date DateTime @default(now())
  complete_date DateTime
  repair Repairs[]
}

model Repairs{
  id String @id @default(uuid())
  request Repair_Request @relation(fields: [requestId] ,references: [id])
  requestId String 
  repair_details String
  cost Decimal
  repair_date DateTime @default(now())
  repair_parts Repair_Parts[]

}

model Repair_Parts{
  id String @id @default(uuid())
  repair Repairs @relation(fields: [repairId],references: [id])
  repairId  String
  quantity  Int @db.SmallInt
  total_cost Decimal
  created_at DateTime @default(now())
  updated_at DateTime? 
}



model Parts{
  id String @id @default(uuid())
  name String
  brand_name String
  model_name String
  image String 
  cost Int
  stock Int 
 created_at DateTime @default(now())
  updated_at DateTime? 
}



model Review{
  id String @id @default(uuid())
  customer Customer @relation(fields: [customerId],references: [id])
  customerId  String
  rating Int @db.SmallInt
  comment String @db.Text
  file String? 
  createdAt DateTime @default(now())
  updatedAt DateTime?
}

model Transactions {
  id String @id @default(uuid())
  customer Customer  @relation(fields: [customerId],references: [id])
  customerId String 
  number String 
  snap_token String?
  status  STATUS @default(PENDING)
  createdAt DateTime @default(now())
}
enum STATUS{
  PENDING 
  PROSESS
  COMPLETED
}
